var gm = require('gm');
var child_process = require('child_process');
var notifier = require('node-notifier');

function run(options , callback){
	var files = options.context.files;
	var i = 0;
	
	$.each(files , function(i,v){
			var params = options.parameters.slice(0);
			$.each(params,function(i,token){
				params[i] = token.replace("{file}" , v);
			});
			console.log(params);
			child_process.execFile(options.program, params, function (err, result) {
				 console.log("result");
				  i++;
				  if(i == files.length)callback(files);
			});
	});
}

function move(options , callback){
	var destination = options.destination;
	var files = options.context.files;
	create(destination);
  	console.log(files);
	 $.each(files , function(i,v){
	            fs.rename(v , destination + "/" + path.basename(v) , function(){});
	 });
}

function getFiles(options , callback){
	var directory = options.directory;
	var fileFormat = options.fileFormat;
	var minSize = options.minSize;
	var maxSize = options.maxSize;
	console.log(directory+"/"+ fileFormat);
	glob(directory+"/"+ fileFormat, undefined, function (er, files) {
	   if(minSize !== undefined && maxSize !=undefined){   	
	   	   $.each(files.slice(0),function(i,v){
	   	   		var size = getFilesize(v);
	   	   		if(size < minSize || size > maxSize){
	   	   			files.splice(files.indexOf(v) , 1);
	   	   		}
	   	   });
	   }

	       callback(files);
    });
}

function rotate(options , callback){
	var images = options.context.files;
	var i = 0;
	$.each(images , function(i,f){
		gm(f)
		.rotate('green', -90)
		.autoOrient()
		.write(f, function (err) {
		  	i++;
		  	if( i == images.length ) callback(images);
		});
	});
}

function resize(options , callback){
	var images = options.context.files;
	var w = options.width;
	var h = options.height;
	var i = 0;
	$.each(images , function(i,f){
		gm(f)
		.resize(w,h)
		.autoOrient()
		.write(f, function (err) {
		  	i++;
		  	if( i == images.length ) callback(images);
		});
	});
}

function copy(options , callback){
	var destination = options.destination;
	var files = options.context.files;
	create(destination);
	var arr = [];
	$.each(files , function(i , file){
		var dest = destination + path.basename(file);
		fs.createReadStream(file)
		.pipe(fs.createWriteStream(dest)).on('finish', function (err) { 
			arr.push(dest);
			if(arr.length == files.length) callback(arr);
		 });
		
	});

}

function create(dir){
    if (!fs.existsSync(dir)){
        fs.mkdirSync(dir);
  	}
}

function getFilesize(filename) {
 var stats = fs.statSync(filename);
 var fileSizeInBytes = stats["size"] / 1000000.0;
 return fileSizeInBytes;
}

function notify(options , callback){
	notifier.notify({
	  'title': 'My notification',
	  'message': 'Hello, there!'
	});
}

module.exports = {
	move : move ,
	getFiles : getFiles,
	rotate : rotate,
	copy : copy,
	resize : resize,
	run : run,
	notify : notify
}